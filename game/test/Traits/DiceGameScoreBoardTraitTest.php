<?php

declare(strict_types=1);

namespace daap19\Dice;

use PHPUnit\Framework\TestCase;

/**
 * Test cases for Dice class.
 */
class DiceGameScoreBoardTraitTest extends TestCase
{
    protected object $diceGame;


    /**
     * @description setUp for test suit. Each test case will run this at first.
     */
    final protected function setUp(): void
    {
        $this->diceGame = new DiceGame21(3, 25, false);
    }


    /**
     * @description tearDown for test suit. Each test case will run this when done is done.
     */
    final protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    /**
     * @description Test DiceGame class with trait ScoreBoardTrait with method printDiceScoreBoard.
     */
    final public function testDiceGamePrintScoreBoardMethod(): void
    {
        /* setup test case */
        $index = $this->diceGame->getPlayerIndex();
        $players = $this->diceGame->getPlayers();
        $player = $players[$index];
        $player->rollDices();
        $player->rollDices();
        $player->rollDices();
        $stopped = $player->hasStopped();
        $bust = $player->isBust();
        $scoreBoard = $this->diceGame->printDiceScoreBoard();

        /* Test case asertions */
        $this->assertFalse($stopped);
        $this->assertFalse($bust);
        $this->assertTrue(method_exists($this->diceGame, "printDiceScoreBoard"), "Class does not have expected method printDiceScoreBoard.");
        $this->assertIsString($scoreBoard);
    }


    /**
     * @description Test DiceGame class with trait ScoreBoardTrait with method printDiceScoreBoard, player has stopped.
     */
    final public function testDiceGamePrintScoreBoardMethodPlayerStopped(): void
    {
        /* setup test case */
        $index = $this->diceGame->getPlayerIndex();
        $players = $this->diceGame->getPlayers();
        $player = $players[$index];
        $player->rollDices();
        $player->rollDices();
        $player->stop();
        $stopped = $player->hasStopped();
        $bust = $player->isBust();
        $playerWin = $player->getWins();
        $this->assertEquals(0, $playerWin);
        $scoreBoard = $this->diceGame->printDiceScoreBoard();

        /* Test case asertions */
        $this->assertTrue($stopped);
        $this->assertFalse($bust);
        $this->assertTrue(method_exists($this->diceGame, "printDiceScoreBoard"), "Class does not have expected method printDiceScoreBoard.");
        $this->assertIsString($scoreBoard);
    }


    /**
     * @description Test DiceGame class with trait ScoreBoardTrait with method printDiceScoreBoard, player has stopped.
     */
    final public function testDiceGamePrintScoreBoardMethodPlayerHaveWon(): void
    {
        /* setup test case */
        $index = $this->diceGame->getPlayerIndex();
        $players = $this->diceGame->getPlayers();
        $player = $players[$index];
        $player->rollDices();
        $player->rollDices();
        $stopped = $player->hasStopped();
        $bust = $player->isBust();
        $player->setWin();
        $playerWin = $player->getWins();
        $scoreBoard = $this->diceGame->printDiceScoreBoard();

        /* Test case asertions */
        $this->assertFalse($stopped);
        $this->assertFalse($bust);
        $this->assertEquals(1, $playerWin);
        $this->assertTrue(method_exists($this->diceGame, "printDiceScoreBoard"), "Class does not have expected method printDiceScoreBoard.");
        $this->assertIsString($scoreBoard);
    }


    /**
     * @description Test DiceGame class with trait ScoreBoardTrait with method printDiceScoreBoard, player is bust.
     */
    final public function testDiceGamePrintScoreBoardMethodPlayerBust(): void
    {
        /* setup test case */
        $index = $this->diceGame->getPlayerIndex();
        $players = $this->diceGame->getPlayers();
        $player = $players[$index];
        $player->rollDices();
        $player->rollDices();
        $player->setBust();
        $bust = $player->isBust();
        $stopped = $player->hasStopped();
        $playerWin = $player->getWins();
        $scoreBoard = $this->diceGame->printDiceScoreBoard();

        /* Test case asertions */
        $this->assertFalse($stopped);
        $this->assertTrue($bust);
        $this->assertEquals(0, $playerWin);
        $this->assertTrue(method_exists($this->diceGame, "printDiceScoreBoard"), "Class does not have expected method printDiceScoreBoard.");
        $this->assertIsString($scoreBoard);
    }
}
