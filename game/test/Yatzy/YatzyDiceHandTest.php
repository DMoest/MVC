<?php

declare(strict_types=1);


/**
 * Namespace declared and others in use.
 */
namespace daap19\Yatzy;
use PHPUnit\Framework\TestCase;


/**
 * Test cases for Dice class.
 */
class YatzyDiceHandTest extends TestCase
{
    protected object $diceHand;


    /**
     * @description setUp for test suit. Each test case will run this at first.
     */
    final protected function setUp(): void
    {
        $this->diceHand = new YatzyDiceHand();
    }


    /**
     * @description tearDown for test suit. Each test case will run this when done is done.
     */
    final protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    /**
     * @description Test construct method for YatzyDiceHand class.
     */
    final public function testYatzyDiceHandConstruct(): void
    {
        /* Test class object for namespace */
        $this->assertIsObject($this->diceHand);
        $this->assertInstanceOf("daap19\Yatzy\YatzyDiceHand", $this->diceHand);

        /* Test class attributes existence */
        $this->assertObjectHasAttribute("keepDices", $this->diceHand);

        /* Test existence of expected class methods */
        $this->assertTrue(method_exists($this->diceHand, "__construct"), "Class does not have expected method __construct.");
        $this->assertTrue(method_exists($this->diceHand, "roll"), "Class does not have expected method roll.");
        $this->assertTrue(method_exists($this->diceHand, "keepDices"), "Class does not have expected method keepDices.");
        $this->assertTrue(method_exists($this->diceHand, "clearKeptDices"), "Class does not have expected method clearKeptDices.");
        $this->assertTrue(method_exists($this->diceHand, "getKeptDices"), "Class does not have expected method getKeptDices.");
        $this->assertTrue(method_exists($this->diceHand, "setForNextRound"), "Class does not have expected method setForNextRound.");
    }


    /**
     * @description Test YatzyDiceHand method roll without kept dices.
     */
    final public function testYatzyDiceHandRollNoKeep(): void
    {
        /* Setup test case */
        $lastRoll = $this->diceHand->roll();

        /* Test method return value */
        $this->assertIsIterable($lastRoll);
        $this->assertIsArray($lastRoll);
        $this->assertNotEmpty($lastRoll);
    }


    /**
     * @description Test YatzyDiceHand method roll with kept dices.
     */
    final public function testYatzyDiceHandRollKeptDices(): void
    {
        /* Setup test case */
        $lastRoll = $this->diceHand->roll();
        $dices = $this->diceHand->getDices();
        $keepers = [$dices[1], $dices[4]];
        $this->diceHand->keepDices($keepers);
        $newLastRoll = $this->diceHand->roll();

        /* Test method return value */
        $this->assertIsIterable($lastRoll);
        $this->assertIsArray($lastRoll);
        $this->assertNotEmpty($lastRoll);
        $this->assertIsIterable($newLastRoll);
        $this->assertIsArray($newLastRoll);
        $this->assertNotEmpty($newLastRoll);

        /* Test value types in array */
        foreach ($newLastRoll as $key => $value) {
            $this->assertIsInt($lastRoll[$key]);
            $this->assertIsInt($value);
        }
    }


    /**
     * @description Test YatzyDiceHand method clearKeptDices.
     */
    final public function testYatzyDiceHandClearKeptDices(): void
    {
        /* Setup test case */
        $lastRoll = $this->diceHand->roll();
        $keepers = $this->diceHand->keepDices([1, 4]);
        $this->diceHand->clearKeptDices();
        $noKeepers = $this->diceHand->getkeptDices();

        /* Test method return value */
        $this->assertIsIterable($lastRoll);
        $this->assertIsArray($lastRoll);
        $this->assertIsIterable($keepers);
        $this->assertIsArray($keepers);
        $this->assertNotEmpty($keepers);
        $this->assertIsIterable($noKeepers);
        $this->assertIsArray($noKeepers);
        $this->assertEmpty($noKeepers);
        $this->assertNotSame($keepers, $noKeepers);
    }


    /**
     * @description Test YatzyDiceHand method setForNextRound.
     */
    final public function testYatzyDiceHandSetForNextRound(): void
    {
        /* Setup test case */
        $lastRoll = $this->diceHand->roll();
        $keepers = $this->diceHand->keepDices([1, 4]);
        $this->diceHand->setForNextRound();
        $noLastRoll = $this->diceHand->getLastRoll();
        $noKeepers = $this->diceHand->getkeptDices();

        /* Test case assertions */
        $this->assertIsIterable($lastRoll);
        $this->assertIsArray($lastRoll);
        $this->assertIsIterable($noLastRoll);
        $this->assertIsArray($noLastRoll);
        $this->assertIsIterable($noKeepers);
        $this->assertIsArray($noKeepers);
        $this->assertEmpty($noKeepers);
        $this->assertIsIterable($keepers);
        $this->assertIsArray($keepers);
        $this->assertNotEmpty($keepers);
        $this->assertNotSame($keepers, $noKeepers);

        foreach ($keepers as $diceValue) {
            $this->assertIsInt($diceValue);
            $this->assertNotContains($diceValue, $noKeepers);
        }
    }
}
