<?php

declare(strict_types=1);


/**
 * Namespace declared and others in use.
 */
namespace daap19\Yatzy;
use PHPUnit\Framework\TestCase;


/**
 * Test cases for Dice class.
 */
class YatzyPlayerTest extends TestCase
{
    protected object $player;


    /**
     * @description setUp for test suit. Each test case will run this at first.
     */
    final protected function setUp(): void
    {
        $this->player = new YatzyPlayer();
    }


    /**
     * @description tearDown for test suit. Each test case will run this when done is done.
     */
    final protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }



    /**
     * @description Test YatzyPlayer object construct method.
     */
    final public function testYatzyPlayerConstruct(): void
    {
        $this->assertIsObject($this->player);
        $this->assertInstanceOf("daap19\Yatzy\YatzyPlayer", $this->player);

        /* Test unique parent::class attributes */
        $this->assertObjectHasAttribute("lastHand", $this->player);

        /* Test YatzyPlayer attributes */
        $this->assertObjectHasAttribute("rolls", $this->player);
        $this->assertObjectHasAttribute("results", $this->player);
        $this->assertObjectHasAttribute("lastRoll", $this->player);
        $this->assertObjectHasAttribute("diceHand", $this->player);
        $this->assertObjectHasAttribute("lastHand", $this->player);
        $this->assertObjectHasAttribute("sum", $this->player);
        $this->assertObjectHasAttribute("average", $this->player);
        $this->assertObjectHasAttribute("playerScores", $this->player);

        /* Test if class have expected methods */
        $this->assertTrue(method_exists($this->player, "rollDices"), "Class does not have expected method rollDices.");
        $this->assertTrue(method_exists($this->player, "getRolls"), "Class does not have expected method getRolls.");
        $this->assertTrue(method_exists($this->player, "getScore"), "Class does not have expected method getScore.");
        $this->assertTrue(method_exists($this->player, "getPlayerScore"), "Class does not have expected method getPlayerScore.");
        $this->assertTrue(method_exists($this->player, "getPlayerScore"), "Class does not have expected method getPlayerScore.");
        $this->assertTrue(method_exists($this->player, "getAmountOfScoresSaved"), "Class does not have expected method getAmountOfScoresSaved.");
        $this->assertTrue(method_exists($this->player, "getAmountOfScoresSaved"), "Class does not have expected method getAmountOfScoresSaved.");
        $this->assertTrue(method_exists($this->player, "getPlayerScoreSum"), "Class does not have expected method getPlayerScoreSum.");
        $this->assertTrue(method_exists($this->player, "getDiceHand"), "Class does not have expected method getDiceHand.");
        $this->assertTrue(method_exists($this->player, "stop"), "Class does not have expected method stop.");
        $this->assertTrue(method_exists($this->player, "hasStopped"), "Class does not have expected method hasStopped.");
        $this->assertTrue(method_exists($this->player, "saveScores"), "Class does not have expected method saveScores.");
        $this->assertTrue(method_exists($this->player, "setForNextRound"), "Class does not have expected method setForNextRound.");
    }


    /**
     * @description Test YatzyPlayer rollDices method.
     */
    final public function testYatzyPlayerRollDices(): void
    {
        /* Setup case */
        $rolledDices = $this->player->rollDices();

        /* Case Assertions */
        $this->assertIsIterable($rolledDices);
        $this->assertIsArray($rolledDices);
    }


    /**
     * @description Test YatzyPlayer getRolls method.
     */
    final public function testYatzyPlayerGetRolls(): void
    {
        /* Setup case */
        $this->player->rollDices();
        $this->player->rollDices();
        $this->player->rollDices();
        $rolls = $this->player->getRolls();

        /* Case Assertions */
        $this->assertIsInt($rolls);
        $this->assertEquals(3, $rolls);
    }


    /**
     * @description Test YatzyPlayer method getScore.
     */
    final public function testYatzyPlayerGetScore(): void
    {
        /* Setup test case */
        $lastRoll = $this->player->rollDices();
        $score = $this->player->getScore();

        /* Test return types */
        $this->assertIsInt($score);
        $this->assertSame($score, array_sum($lastRoll));
    }


    /**
     * @description Test YatzyPlayer getDiceHand method.
     */
    final public function testYatzyPlayerGetDiceHand(): void
    {
        /* Setup case */
        $this->player->rollDices();
        $diceHand = $this->player->getDiceHand();

        /* Test case assertions */
        $this->assertIsObject($diceHand);
    }


    /**
     * @description Test YatzyPlayer stop method.
     */
    final public function testYatzyPlayerStop(): void
    {
        /* Setup case */
        $beforeStop = $this->player->hasStopped();
        $this->player->stop();
        $stopped = $this->player->hasStopped();

        /* Test case assertions */
        $this->assertIsBool($beforeStop);
        $this->assertFalse($beforeStop);
        $this->assertIsBool($stopped);
        $this->assertTrue($stopped);
    }


    /**
     * @description Test YatzyPlayer method setForNextRound.
     */
    final public function testYatzyPlayerSetForNextRound(): void
    {
        /* Setup test case */
        $lastRoll = $this->player->rollDices();
        $rolls = $this->player->getRolls();
        $this->player->stop();
        $stopped = $this->player->hasStopped();

        $this->player->setForNextRound();

        $newLastRoll = $this->player->getLastRoll();
        $newRolls = $this->player->getRolls();
        $newStopped = $this->player->hasStopped();

        /* Test case assertions */
        $this->assertIsInt($rolls);
        $this->assertIsInt($newRolls);
        $this->assertNotEquals($rolls, $newRolls);
        $this->assertIsIterable($lastRoll);
        $this->assertIsArray($newLastRoll);
        $this->assertNotEquals($lastRoll, $newLastRoll);
        $this->assertIsBool($stopped);
        $this->assertIsBool($newStopped);
        $this->assertNotEquals($stopped, $newStopped);
    }
}
