<?php

declare(strict_types=1);

namespace daap19\Dice;

use PHPUnit\Framework\TestCase;

/**
 * Test cases for Dice class.
 */
class DicePlayerGameLogicTest extends TestCase
{
    protected object $player;


    /**
     * @description setUp for test suit. Each test case will run this at first.
     */
    final protected function setUp(): void
    {
        $this->player = new DicePlayer();
    }


    /**
     * @description tearDown for test suit. Each test case will run this when done is done.
     */
    final protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    /**
     * @description Test DicePlayer setCredit method functionality.
     */
    final public function testDicePlayerSetCredit(): void
    {
        $credit1 = $this->player->getCredit();
        $credit2 = $credit1 * 3;
        $this->player->setCredit($credit2);
        $credit2 = $this->player->getCredit();

        $this->assertIsInt($credit1);
        $this->assertIsInt($credit2);
        $this->assertNotEquals($credit1, $credit2);
    }


    /**
     * @description Test DicePlayer setWins method return type after DicePlayer wins a game round.
     */
    final public function testDicePlayerGetWinsAfterPlayerWin(): void
    {
        $this->player->setWin();
        $wins = $this->player->getWins();
        $this->assertIsInt($wins);
        $this->assertEquals(1, $wins);
    }


    /**
     * @description Test DicePlayer stop property after player stops.
     */
    final public function testDicePlayerStop(): void
    {
        $this->player->stop();
        $stopped = $this->player->hasStopped();
        $this->assertIsBool($stopped);
        $this->assertEquals(true, $stopped);
    }


    /**
     * @description Test DicePlayer bust property after player goes bust in a game round.
     */
    final public function testDicePlayerGoingBust(): void
    {
        $this->player->setBust();
        $bust = $this->player->isBust();
        $this->assertIsBool($bust);
        $this->assertEquals(true, $bust);
    }


    /**
     * @description Test DicePlayer out property after player is out of the game.
     */
    final public function testDicePlayerOutOfGame(): void
    {
        $this->player->setOut();
        $out = $this->player->isOut();
        $this->assertIsBool($out);
        $this->assertEquals(true, $out);
    }


    /**
     * @description Test DicePlayer set for next game round method.
     */
    final public function testPlayerSetForNextRound(): void
    {
        $this->player = new DicePlayer(25, 1);

        /* Pre setForNextRound */
        $rolledLastRoll = $this->player->rollDices(5);
        $rolledResults = $this->player->getResults();
        $rolledSum = $this->player->getSumTotal();
        $rolledAverage = $this->player->getAverage();
        $this->player->stop();
        $setStop = $this->player->hasStopped();
        $this->player->setBust();
        $setBust = $this->player->isBust();
        $this->player->setForNextRound();

        /* Post setForNextRound */
        $resetResults = $this->player->getResults();
        $resetLastRoll = $this->player->getLastRoll();
        $resetSum = $this->player->getSumTotal();
        $resetAverage = $this->player->getAverage();
        $resetStop = $this->player->hasStopped();
        $resetBust = $this->player->isBust();

        /* Testing */
        $this->assertIsArray($rolledLastRoll);
        $this->assertIsArray($resetLastRoll);
        $this->assertEmpty($resetLastRoll);
        $this->assertIsArray($rolledResults);
        $this->assertIsArray($resetResults);
        $this->assertEmpty($resetResults);
        $this->assertIsInt($rolledSum);
        $this->assertIsInt($resetSum);
        $this->assertEquals(0, $resetSum);
        $this->assertIsFloat($rolledAverage);
        $this->assertNull($resetAverage);
        $this->assertEquals(0, $resetAverage);
        $this->assertIsBool($setStop);
        $this->assertTrue($setStop);
        $this->assertIsBool($resetStop);
        $this->assertFalse($resetStop);
        $this->assertIsBool($setBust);
        $this->assertTrue($setBust);
        $this->assertIsBool($resetBust);
        $this->assertFalse($resetBust);
    }


    /**
     * @description Test DicePlayer set for next game round method if credit is zero.
     */
    final public function testPlayerSetForNextRoundZeroCredit(): void
    {
        $this->player = new DicePlayer(25, 1);

        $this->player->stop();
        $stopped = $this->player->hasStopped();
        $this->player->setCredit(0);
        $this->player->setForNextRound();

        $this->assertIsBool($stopped);
        $this->assertTrue($stopped);
    }
}
