<?php

declare(strict_types=1);

namespace daap19\Dice;

use PHPUnit\Framework\TestCase;

/**
 * Test cases for Dice class.
 */
class DiceGameLogicMethodsTest extends TestCase
{
    protected object $diceGame;


    /**
     * @description setUp for test suit. Each test case will run this at first.
     */
    final protected function setUp(): void
    {
        $this->diceGame = new DiceGame21(2, 25, false);
    }


    /**
     * @description tearDown for test suit. Each test case will run this when done is done.
     */
    final protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    /**
     * @description Test DiceGame method setNextPlayerIndex.
     */
    final public function testDiceGameSetNextRound(): void
    {
        $round = $this->diceGame->getRound();

        $this->assertIsInt($round);
        $this->assertEquals(1, $round);

        $this->diceGame->setNextRound();
        $round = $this->diceGame->getRound();

        $this->assertIsInt($round);
        $this->assertEquals(2, $round);

        $this->diceGame->setNextRound();
        $round = $this->diceGame->getRound();

        $this->assertIsInt($round);
        $this->assertEquals(3, $round);
    }


    /**
     * @description Test DiceGame method checkScore.
     */
    final public function testDiceGameCheckScore(): void
    {
        $players = $this->diceGame->getPlayers();

        foreach ($players as $player) {
            $this->diceGame->checkScore($player);
            $score = $player->getSumTotal();
            $stopped = $player->hasStopped();
            $bust = $player->isBust();

            $this->assertIsInt($score);
            $this->assertEquals(0, $score);
            $this->assertIsBool($stopped);
            $this->assertFalse($stopped);
            $this->assertIsBool($bust);
            $this->assertFalse($bust);
        }
    }


    /**
     * @description Test DiceGame method checkScore with busted player score.
     */
    final public function testDiceGameCheckScoreBustedScore(): void
    {
        $players = $this->diceGame->getPlayers();
        $index = $this->diceGame->getPlayerIndex();
        $player = $players[$index];
        $player->rollDices(22); // Make sure sum of results is passed 21, roll 22 dices. Probability is that its impossible for all 21 to get 1 in score, but just to build a strong/religable test case.

        $this->diceGame->checkScore($player);

        $score = $player->getSumTotal();
        $stopped = $player->hasStopped();
        $bust = $player->isBust();

        $this->assertIsInt($score);
        $this->assertGreaterThan(21, $score);

        $this->assertIsBool($stopped);
        $this->assertTrue($stopped);

        $this->assertIsBool($bust);
        $this->assertTrue($bust);
    }


    /**
     * @description Test DiceGame method playGame with argument "roll" from form submit. Player is not machine player.
     */
    final public function testDiceGamePlayGameWithRollArgument(): void
    {
        /* Setup test case */
        $this->diceGame->playGame(2, "roll");
        $players = $this->diceGame->getPlayers();
        $index = $this->diceGame->getPlayerIndex();
        $player = $players[$index];
        $results = $player->getResults();
        $machine = $player->isMachine();

        /* test case assertions */
        $this->assertFalse($machine);
        $this->assertNotEmpty($results);
    }


    /**
     * @description Test DiceGame method playGame with argument "stop" from form submit. Player is not machine player.
     */
    final public function testDiceGamePlayGameWithStopArgument(): void
    {
        /* Setup test case */
        $this->diceGame->playGame(1, "stop");
        $players = $this->diceGame->getPlayers();
        $index = $this->diceGame->getPlayerIndex();
        $player = $players[$index];
        $stopped = $player->hasStopped();
        $results = $player->getResults();

        /* test case assertions */
        $this->assertTrue($stopped);
        $this->assertEmpty($results);
    }
}
