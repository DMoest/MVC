<?php

declare(strict_types=1);


/**
 * Namespace declared and others in use.
 */
namespace daap19\UnitTests;
use \daap19\Dice\DiceGame21;
use PHPUnit\Framework\TestCase;


/**
 * Test cases for Dice class.
 */
class DiceGameTest extends TestCase
{
    protected object $diceGame;


    /**
     * @description setUp for test suit. Each test case will run this at first.
     */
    final protected function setUp(): void
    {
        $this->diceGame = new DiceGame21(2, 25, false);
    }


    /**
     * @description tearDown for test suit. Each test case will run this when done is done.
     */
    final protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    /**
     * @description Test DiceGame class construct method.
     */
    final public function testDiceGameConstruct(): void
    {
        /* Test class namespace */
        $this->assertIsObject($this->diceGame);
        $this->assertInstanceOf("daap19\Dice\DiceGame21", $this->diceGame);

        /* Test class attributes existence */
        $this->assertObjectHasAttribute("players", $this->diceGame);
        $this->assertObjectHasAttribute("round", $this->diceGame);
        $this->assertObjectHasAttribute("playerIndex", $this->diceGame);
        $this->assertObjectHasAttribute("numOfPlayers", $this->diceGame);

        /* Test expected class methods existence */
        $this->assertTrue(method_exists($this->diceGame, "__construct"), "Class does not have expected method __construct.");
        $this->assertTrue(method_exists($this->diceGame, "playGame"), "Class does not have expected method playGame.");
        $this->assertTrue(method_exists($this->diceGame, "playerRound"), "Class does not have expected method playerRound.");
        $this->assertTrue(method_exists($this->diceGame, "playComputer"), "Class does not have expected method playComputer.");
        $this->assertTrue(method_exists($this->diceGame, "showGraphicDices"), "Class does not have expected method showGraphicDices.");
        $this->assertTrue(method_exists($this->diceGame, "getPlayers"), "Class does not have expected method getPlayers.");
        $this->assertTrue(method_exists($this->diceGame, "getPlayerIndex"), "Class does not have expected method getPlayerIndex.");
        $this->assertTrue(method_exists($this->diceGame, "setNextPlayerIndex"), "Class does not have expected method setNextPlayerIndex.");
        $this->assertTrue(method_exists($this->diceGame, "setNextRound"), "Class does not have expected method setNextRound.");
        $this->assertTrue(method_exists($this->diceGame, "checkScore"), "Class does not have expected method checkScore.");
        $this->assertTrue(method_exists($this->diceGame, "solveTheBet"), "Class does not have expected method solveTheBet.");
    }


    /**
     * @description Test DiceGame class construct method without machine player. Test properties initial values on players with expectence of one player as machine on the end of players array.
     */
    final public function testDiceGameConstructWithOutMachinePlayer(): void
    {
        /* Setup test case */
        $players = $this->diceGame->getPlayers();
        $numOfPlayers = count($players);

        /* Test case assertions */
        $this->assertNotEmpty($players);

        for ($i = 0; $i < $numOfPlayers; $i++) {
            $credit = $players[$i]->getCredit();
            $this->assertIsInt($credit);
            $this->assertEquals(25, $credit);

            $wins = $players[$i]->getWins();
            $this->assertIsInt($wins);
            $this->assertEquals(0, $wins);

            $stopped = $players[$i]->hasStopped();
            $this->assertIsBool($stopped);
            $this->assertFalse($stopped);

            $bust = $players[$i]->isBust();
            $this->assertIsBool($bust);
            $this->assertFalse($bust);

            $out = $players[$i]->isOut();
            $this->assertIsBool($out);
            $this->assertFalse($out);

            $machine = $players[$i]->isMachine();
            $this->assertIsBool($machine);
            $this->assertFalse($machine);
        }
    }


    /**
     * @description Test DiceGame method showGraphicDices.
     */
    final public function testShowGraphicDices(): void
    {
        /* Setup test case */
        $index = $this->diceGame->getPlayerIndex();
        $players = $this->diceGame->getPlayers();
        $player = $players[$index];
        $player->rollDices();
        $diceHand = $player->getLastHand();
        $graphicDices = $this->diceGame->showGraphicDices($diceHand);

        /* Test case assertions */
        $this->assertIsIterable($graphicDices);
        $this->assertIsArray($graphicDices);
    }


    /**
     * @description Test DiceGame method getPlayers.
     */
    final public function testDiceGameGetPlayers(): void
    {
        $players = $this->diceGame->getPlayers();

        /* Test case assertions */
        $this->assertIsIterable($players);
        $this->assertIsArray($players);
        $this->assertNotEmpty($players);
    }


    /**
     * @description Test DiceGame method getPlayerIndex.
     */
    final public function testDiceGameGetPlayerIndex(): void
    {
        $index = $this->diceGame->getPlayerIndex();

        $this->assertIsInt($index);
        $this->assertEquals(0, $index);
    }


    /**
     * @description Test DiceGame method setNextPlayerIndex.
     */
    final public function testDiceGameSetPlayerIndex(): void
    {
        $players = $this->diceGame->getPlayers();

        foreach ($players as $key => $player) {
            $index = $this->diceGame->getPlayerIndex();

            $this->assertIsInt($index);
            $this->assertEquals($key, $index);
            $this->assertEquals($player, $players[$index]);

            $this->diceGame->setNextPlayerIndex();
        }

        /* Expect index to be back at 0 */
        $index = $this->diceGame->getPlayerIndex();
        $this->assertIsInt($index);
        $this->assertEquals(0, $index);
    }


    /**
     * @description Test DiceGame method setNextPlayerIndex.
     */
    final public function testDiceGameGetRound(): void
    {
        $round = $this->diceGame->getRound();

        $this->assertIsInt($round);
        $this->assertEquals(1, $round);
    }
}
