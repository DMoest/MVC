<?php

declare(strict_types=1);

namespace daap19\Controller;

use PHPUnit\Framework\TestCase;
//use Psr\Http\Message\ResponseInterface;
//use Webmozart\Assert\Assert;
//use function Mos\Functions\renderView;

/**
 * Test cases for the controller class Yatzy.
 */
class ControllerYatzyTest extends TestCase
{
    protected object $yatzyObject;


    /**
     * @description setUp for test suit. Each test case will run this at first.
     */
    final protected function setUp(): void
    {
        $this->yatzyObject = new \daap19\Yatzy\Yatzy();
        $this->yatzyController = new Yatzy();

        $_SESSION["yatzy"] = $this->yatzyObject;
    }


    /**
     * @description tearDown for test suit. Each test case will run this when done is done.
     */
    final protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    final public function setupPostVariables(): void
    {
        $_POST["submit"] = "roll";
    }


    final public function setupSaveSomeScores(): void
    {
        $this->yatzyObject->play("roll");
        $players = $this->yatzyObject->getPlayers();
        $player = $players[$this->yatzyObject->getPlayerIndex()];
        $lastRoll = $player->getLastRoll();

        $player->saveScores($lastRoll, $lastRoll[0]);
    }


    /**
     * @description Test new Yatzy object.
     */
    final public function testYatzyControllerObject(): void
    {
        /* Test type and namespace existence */
        $this->assertIsObject($this->yatzyController);
        $this->assertInstanceOf("daap19\Controller\Yatzy", $this->yatzyController);

        /* Test if class have expected methods */
        $this->assertTrue(method_exists($this->yatzyController, "renderView"), "Class does not have expected method renderView.");
        $this->assertTrue(method_exists($this->yatzyController, "processResponse"), "Class does not have expected method processResponse.");
    }


    /**
     * @description Test new Yatzy object.
     */
    final public function testYatzyMethodRenderView(): void
    {
        /* Setup test case */
        $expected = "\Psr\Http\Message\ResponseInterface";
        $response = $this->yatzyController->renderView();

        /* Test type and namespace existence */
        $this->assertIsObject($response);
        $this->assertInstanceOf($expected, $response);

        /* Test response object attributes existence */
        $this->assertObjectHasAttribute("reasonPhrase", $response);
        $this->assertObjectHasAttribute("statusCode", $response);
        $this->assertObjectHasAttribute("headers", $response);
        $this->assertObjectHasAttribute("headerNames", $response);
        $this->assertObjectHasAttribute("protocol", $response);
        $this->assertObjectHasAttribute("stream", $response);
    }


    /**
     * @description Test response object to contain status code 301.
     */
    final public function testYatzyMethodProcessResponseStatusCode(): void
    {
        /* Setup test case */
        $this->yatzyObject->play("roll");
        $this->setupPostVariables();
        $processedResponse = $this->yatzyController->processResponse();
        $statusCode = $processedResponse->getStatusCode();

        /* Test case assertions */
        $this->assertIsInt($statusCode);
        $this->assertEquals(301, $statusCode);
    }


    /**
     * @description Test Yatzy controller method processResponse redirect path.
     */
    final public function testYatzyMethodProcessResponseRedirecPath(): void
    {
        /* Setup test case */
        $this->setupPostVariables();
        $basePath = "://vendor/bin/";
        $processedResponse = $this->yatzyController->processResponse();
        $headers = $processedResponse->getHeaders();
        $redirectPath = $headers["Location"][0];

        /* Test case assertions */
        $this->assertIsIterable($headers);
        $this->assertIsArray($headers);
        $this->assertArrayHasKey('Location', $headers);
        $this->assertIsString($redirectPath);
        $this->assertEquals($basePath . "yatzy__results/view", $redirectPath);
    }


    /**
     * @description Test Yatzy controller method processResponse with saved scores of value 1.
     */
    final public function testYatzyMethodProcessResponseWithSavedScores1(): void
    {
        /* Setup test case */
        $this->setupPostVariables();
        $this->setupSaveSomeScores();
        $_POST["dice--0"] = 1;
        $players = $this->yatzyObject->getPlayers();
        $player = $players[$this->yatzyObject->getPlayerIndex()];
        $this->yatzyController->processResponse();
        $savedScores = $player->getPlayerScore();

        /* Test case assertions */
        $this->assertIsIterable($savedScores);
        $this->assertIsArray($savedScores);
        $this->assertNotEmpty($savedScores);
        $this->assertArrayHasKey(0, $savedScores);
    }


    /**
     * @description Test Yatzy controller method processResponse with saved scores of value 2.
     */
    final public function testYatzyMethodProcessResponseWithSavedScores2(): void
    {
        /* Setup test case */
        $this->setupPostVariables();
        $this->setupSaveSomeScores();
        $_POST["dice--1"] = 1;
        $players = $this->yatzyObject->getPlayers();
        $player = $players[$this->yatzyObject->getPlayerIndex()];
        $this->yatzyController->processResponse();
        $savedScores = $player->getPlayerScore();

        /* Test case assertions */
        $this->assertIsIterable($savedScores);
        $this->assertIsArray($savedScores);
        $this->assertNotEmpty($savedScores);
        $this->assertArrayHasKey(1, $savedScores);
    }


    /**
     * @description Test Yatzy controller method processResponse with saved scores of value 3.
     */
    final public function testYatzyMethodProcessResponseWithSavedScores3(): void
    {
        /* Setup test case */
        $this->setupPostVariables();
        $this->setupSaveSomeScores();
        $_POST["dice--2"] = 1;
        $players = $this->yatzyObject->getPlayers();
        $player = $players[$this->yatzyObject->getPlayerIndex()];
        $this->yatzyController->processResponse();
        $savedScores = $player->getPlayerScore();

        /* Test case assertions */
        $this->assertIsIterable($savedScores);
        $this->assertIsArray($savedScores);
        $this->assertNotEmpty($savedScores);
        $this->assertArrayHasKey(2, $savedScores);
    }


    /**
     * @description Test Yatzy controller method processResponse with saved scores of value 4.
     */
    final public function testYatzyMethodProcessResponseWithSavedScores4(): void
    {
        /* Setup test case */
        $this->setupPostVariables();
        $this->setupSaveSomeScores();
        $_POST["dice--3"] = 1;
        $players = $this->yatzyObject->getPlayers();
        $player = $players[$this->yatzyObject->getPlayerIndex()];
        $this->yatzyController->processResponse();
        $savedScores = $player->getPlayerScore();

        /* Test case assertions */
        $this->assertIsIterable($savedScores);
        $this->assertIsArray($savedScores);
        $this->assertNotEmpty($savedScores);
        $this->assertArrayHasKey(3, $savedScores);
    }


    /**
     * @description Test Yatzy controller method processResponse with saved scores of value 5.
     */
    final public function testYatzyMethodProcessResponseWithSavedScores5(): void
    {
        /* Setup test case */
        $this->setupPostVariables();
        $this->setupSaveSomeScores();
        $_POST["dice--4"] = 1;
        $players = $this->yatzyObject->getPlayers();
        $player = $players[$this->yatzyObject->getPlayerIndex()];
        $this->yatzyController->processResponse();
        $savedScores = $player->getPlayerScore();

        /* Test case assertions */
        $this->assertIsIterable($savedScores);
        $this->assertIsArray($savedScores);
        $this->assertNotEmpty($savedScores);
        $this->assertArrayHasKey(4, $savedScores);
    }


    /**
     * @description Test Yatzy controller method processResponse with saved scores of value 6.
     */
    final public function testYatzyMethodProcessResponseWithSavedScores6(): void
    {
        /* Setup test case */
        $this->setupPostVariables();
        $this->setupSaveSomeScores();
        $_POST["dice--5"] = 1;
        $players = $this->yatzyObject->getPlayers();
        $player = $players[$this->yatzyObject->getPlayerIndex()];
        $this->yatzyController->processResponse();
        $savedScores = $player->getPlayerScore();

        /* Test case assertions */
        $this->assertIsIterable($savedScores);
        $this->assertIsArray($savedScores);
        $this->assertNotEmpty($savedScores);
        $this->assertArrayHasKey(5, $savedScores);
    }
}
