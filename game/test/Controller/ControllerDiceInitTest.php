<?php

declare(strict_types=1);


/**
 * Namespace declared and others in use.
 */
namespace daap19\UnitTests;
use daap19\Controller\DiceInit;
use PHPUnit\Framework\TestCase;


/**
 * Test suite for the controller Session.
 */
class ControllerDiceInitTest extends TestCase
{
    protected object $diceInit;

    /**
     * @description setUp for test suit. Each test case will run this at first.
     */
    final protected function setUp(): void
    {
        $this->diceInit = new DiceInit();
    }


    /**
     * @description tearDown for test suit. Each test case will run this when done is done.
     */
    final protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    /**
     * @description Setup for $_POST variable dependencies for test cases false machine.
     */
    final public function setupPostVariablesFalseMachine(): void
    {
        $_POST["players"] = 2;
        $_POST["credit"] = 25;
        $_POST["machine"] = false;
    }


    /**
     * @description Setup for $_POST variable dependencies for test cases null machine.
     */
    final public function setupPostVariablesNULLMachine(): void
    {
        $_POST["players"] = 2;
        $_POST["credit"] = 25;
        $_POST["machine"] = null;
    }


    /**
     * @description Test new DiceInit object.
     */
    final public function testDiceInitObject(): void
    {
        /* Test type and namespace existence */
        $this->assertIsObject($this->diceInit);
        $this->assertInstanceOf("daap19\Controller\DiceInit", $this->diceInit);

        /* Test if class have expected methods */
        $this->assertTrue(method_exists($this->diceInit, "renderView"), "Class does not have expected method renderView.");
        $this->assertTrue(method_exists($this->diceInit, "processResponse"), "Class does not have expected method processResponse.");
    }


    /**
     * @description Test new DiceInit object.
     */
    final public function testDiceInitMethodRenderView(): void
    {
        /* Setup test case */
        $expected = "\Psr\Http\Message\ResponseInterface";
        $response = $this->diceInit->renderView();

        /* Test type and namespace existence */
        $this->assertIsObject($response);
        $this->assertInstanceOf($expected, $response);

        /* Test response object attributes existence */
        $this->assertObjectHasAttribute("reasonPhrase", $response);
        $this->assertObjectHasAttribute("statusCode", $response);
        $this->assertObjectHasAttribute("headers", $response);
        $this->assertObjectHasAttribute("headerNames", $response);
        $this->assertObjectHasAttribute("protocol", $response);
        $this->assertObjectHasAttribute("stream", $response);
    }


    /**
     * @description Test response object to contain status code 301.
     */
    final public function testDiceInitMethodProcessResponseStatusCode(): void
    {
        /* Setup test case */
        $this->setupPostVariablesFalseMachine();
        $processedResponse = $this->diceInit->processResponse();
        $statusCode = $processedResponse->getStatusCode();

        /* Test case assertions */
        $this->assertIsInt($statusCode);
        $this->assertEquals(301, $statusCode);
    }


    /**
     * @description Test DiceInit controller method processResponse object to contain status code 301.
     * Machine set to null to reach if-statement in tested method.
     */
    final public function testDiceInitMethodProcessResponseStatusCodeNoMachine(): void
    {
        /* Setup test case */
        $this->setupPostVariablesNULLMachine();
        $processedResponse = $this->diceInit->processResponse();
        $statusCode = $processedResponse->getStatusCode();

        /* Test case assertions */
        $this->assertIsInt($statusCode);
        $this->assertEquals(301, $statusCode);
    }


    /**
     * @description Test DiceInit controller method processResponse redirect path.
     */
    final public function testDiceInitMethodProcessResponseRedirecPath(): void
    {
        /* Setup test case */
        $basePath = "://vendor/bin/";
        $this->setupPostVariablesFalseMachine();
        $processedResponse = $this->diceInit->processResponse();
        $headers = $processedResponse->getHeaders();
        $redirectPath = $headers["Location"][0];

        /* Test case assertions */
        $this->assertIsIterable($headers);
        $this->assertIsArray($headers);
        $this->assertArrayHasKey('Location', $headers);
        $this->assertIsString($redirectPath);
        $this->assertEquals($basePath . "dice/view", $redirectPath);
    }
}
